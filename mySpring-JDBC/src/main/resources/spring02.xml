<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

        <!-- Spring自动扫描注解的配置 -->
        <context:component-scan base-package="com.loda"/>



        <!-- 加载properties 配置文件 -->
        <context:property-placeholder location="jdbc.properties"/>

        <!-- 配置 c3p0 数据源 -->
        <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
                <!-- property标签的value属性对应的是jdbc.properties中的值 -->
                <property name="driverClass" value="${jdbc.driver}"></property>
                <property name="jdbcUrl" value="${jdbc.url}"></property>
                <property name="user" value="${jdbc.user}"></property>
                <property name="password" value="${jdbc.password}"></property>
        </bean>

        <!-- 配置JdbcTemplate实例，并注入一个dataSource数据源-->
        <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
                <property name="dataSource" ref="dataSource"></property>
        </bean>

        <!--
       Spring 事务配置
           1. 添加事务与AOP的命名空间
           2. 开启AOP代理
           3. 配置事务管理器
           4. 配置事务通知
           5. 配置AOP
   -->
        <!--开启AOP-->
        <aop:aspectj-autoproxy/>

        <!--配置事务管理器-->
        <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                <!-- 数据源   ref代表的是C3P0数据源-->
                <property name="dataSource" ref="dataSource"/>
        </bean>
        <!-- 配置事务通知  transaction-manager属性表示事务通知绑定的是哪个事务管理器 -->
        <!--
        tx:method的属性:
           name
                是必须的,表示与事务属性关联的方法名(业务方法名),对切入点进行细化。
                   通配符（*）可以用来指定一批关联到相同的事务属性的方法。
                       如：'get*'、'handle*'、'on*Event'等等.
           propagation
                不是必须的，默认值是REQUIRED
                   表示事务传播行为, 包括：
                    REQUIRED,SUPPORTS,MANDATORY,NEVER
                    REQUIRES_NEW,NOT_SUPPORTED,NESTED
           isolation
                不是必须的，默认值DEFAULT
                表示事务隔离级别(数据库的隔离级别)
           timeout
                不是必须的，默认值-1(永不超时)
                表示事务超时的时间（以秒为单位）
           read-only
                不是必须的，默认值false不是只读的
                表示事务是否只读
           rollback-for
                不是必须的
                表示将被触发进行回滚的 Exception(s)；以逗号分开。
                    如：'com.foo.MyBusinessException,ServletException'
           no-rollback-for
                不是必须的
                表示不被触发进行回滚的 Exception(s)；以逗号分开。
                    如：'com.foo.MyBusinessException,ServletException'
                    任何 RuntimeException 将触发事务回滚
        -->
        <tx:advice id="txAdvice" transaction-manager="txManager">
                <tx:attributes>
                        <tx:method name="add*" propagation="REQUIRED"/>
                        <tx:method name="update*" propagation="REQUIRED"/>
                        <tx:method name="delete*" propagation="REQUIRED"/>
                        <tx:method name="query*" read-only="true"/>
                </tx:attributes>
        </tx:advice>

        <!-- 配置AOP：定义aop切面 （切入点和通知） -->
        <aop:config>
                <!-- 设置切入点 设置需要被拦截的方法 -->
                <aop:pointcut id="cut" expression="execution(* com.loda.dao..*.*(..))"/>
                <!-- 设置通知 事务通知 -->
                <aop:advisor advice-ref="txAdvice" pointcut-ref="cut"/>
        </aop:config>
        
        <!-- 配置注解支持 -->
        <tx:annotation-driven transaction-manager="txManager"/>
</beans>